diff --git a/code/CMakeLists.txt b/code/CMakeLists.txt
index fb0cba861..f0e19daff 100644
--- a/code/CMakeLists.txt
+++ b/code/CMakeLists.txt
@@ -46,15 +46,15 @@ message("SVNINFOSTATUS: ${SVNINFOSTATUS}")
 if(${SVNINFOSTATUS} STREQUAL "0")
     message("Running svn scripts.")
     set( CASA_svngen ${CMAKE_SOURCE_DIR}/install/generate-svninfo )
-    execute_process( COMMAND ${CASA_svngen} -revision url=${CMAKE_SOURCE_DIR} 
+    execute_process( COMMAND ${CASA_svngen} -revision url=${CMAKE_SOURCE_DIR}
                    OUTPUT_VARIABLE SVNREVISION
                    OUTPUT_STRIP_TRAILING_WHITESPACE
     )
-    execute_process( COMMAND ${CASA_svngen} -date url=${CMAKE_SOURCE_DIR} 
+    execute_process( COMMAND ${CASA_svngen} -date url=${CMAKE_SOURCE_DIR}
                    OUTPUT_VARIABLE SVNDATE
                    OUTPUT_STRIP_TRAILING_WHITESPACE
     )
-    execute_process( COMMAND ${CASA_svngen} -url url=${CMAKE_SOURCE_DIR} 
+    execute_process( COMMAND ${CASA_svngen} -url url=${CMAKE_SOURCE_DIR}
                    OUTPUT_VARIABLE CASASRCURL
                    OUTPUT_STRIP_TRAILING_WHITESPACE
     )
@@ -78,7 +78,7 @@ if( CASA_VERSION_FEATURE STREQUAL "0" )
     execute_process( COMMAND svn info
                      RESULT_VARIABLE SVNINFOSTATUS
                      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
- 
+
     ### hash-bound git will need another solution
     if ( ${SVNINFOSTATUS} STREQUAL "0" )
         execute_process(    COMMAND svnversion
@@ -130,7 +130,7 @@ enable_language (Fortran)
 # Define compiler paths on OSX 10.5. This must be done before invoking project()
 if( APPLE )
     set( SO dylib )
-    if( EXISTS ${CMAKE_Fortran_COMPILER}) 
+    if( EXISTS ${CMAKE_Fortran_COMPILER})
         message(STATUS "Use " ${CMAKE_Fortran_COMPILER})
     elseif( EXISTS            /opt/casa/core2-apple-darwin8/3rd-party/bin/gfortran )
         set( CMAKE_Fortran_COMPILER /opt/casa/core2-apple-darwin8/3rd-party/bin/gfortran )
@@ -151,7 +151,7 @@ endif()
 
 project( CASA C CXX Fortran )
 
-# C is enabled because 
+# C is enabled because
 # - FindQt4.cmake requires it (bug)
 # - ccmtools uses the C preprocessor
 if( CMAKE_Fortran_COMPILER STREQUAL CMAKE_Fortran_COMPILER-NOTFOUND )
@@ -178,7 +178,7 @@ endif()
 if( NOT DEFINED UseCrashReporter)
     set( UseCrashReporter 1 )
 endif()
- 
+
 if( CMAKE_BUILD_TYPE STREQUAL Debug )
     add_definitions( -DAIPS_DEBUG )
     if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
@@ -206,13 +206,13 @@ if( NOT arch AND EXISTS ${casaroot}/aipshosts )
     execute_process( COMMAND uname -n
                      COMMAND awk -F. "{print $1}"
                      OUTPUT_VARIABLE _host OUTPUT_STRIP_TRAILING_WHITESPACE )
-    execute_process( COMMAND egrep "^[\ ]*${_host}[\ \t]*" ${casaroot}/aipshosts 
+    execute_process( COMMAND egrep "^[\ ]*${_host}[\ \t]*" ${casaroot}/aipshosts
                      COMMAND awk "{print $2}"
                      OUTPUT_VARIABLE _a
                      OUTPUT_STRIP_TRAILING_WHITESPACE )
 
     if( _a )
-        set( arch ${_a} )    
+        set( arch ${_a} )
     endif()
 endif()
 
@@ -232,7 +232,7 @@ if (CMAKE_CROSSCOMPILING)
 endif()
 dump( CMAKE_SYSTEM
       CMAKE_SYSTEM_PROCESSOR
-      CMAKE_GENERATOR 
+      CMAKE_GENERATOR
       CMAKE_BUILD_TYPE )
 
 set( BUILD_SHARED_LIBS ON )
@@ -335,7 +335,7 @@ message( STATUS "$_gfortran_lib_path = ${_gfortran_lib_path}" )
 # Define paths for development packages.
 # Check for unresolved symbols at link time.
 # Set compiler flags.
-# 
+#
 if( APPLE )
     set( CMAKE_Fortran_FLAGS -fno-second-underscore )
 
@@ -421,7 +421,7 @@ if( APPLE )
                          COMMAND perl -pe "s|.*?(\\d+\\.\\d+)\\.\\d+$|$1|"
                          OUTPUT_VARIABLE _cxx_version
                          OUTPUT_STRIP_TRAILING_WHITESPACE )
-    
+
         message( STATUS "$_gfortran_version = ${_gfortran_version}" )
         message( STATUS "$_gcc_machine = ${_gcc_machine}" )
         message( STATUS "cxxversion (${_cxx_version})" )
@@ -600,7 +600,7 @@ set( LATEX2HTML_OPTIONS "htcasa,section+,next,p-width,5"
 
 # Use pdflatex
 find_program( PDFLATEX_COMPILER NAMES pdflatex )
-#set( LATEX2PDF_OPTIONS "htcasa,section+,next,p-width,3" 
+#set( LATEX2PDF_OPTIONS "htcasa,section+,next,p-width,3"
 #CACHE STRING "LATEX2PDF_CONVERTER options" )
 
 set( CASA_DOC_DIR ${casaroot}/docs ) # Where to put documentation
@@ -609,7 +609,7 @@ find_package( Doxygen )
 
 if( DOXYGEN_FOUND )
   add_custom_target( doc_doxy
-    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/install/docutils/doxygen.cfg 
+    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/install/docutils/doxygen.cfg
     WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
     )
 else()
@@ -639,7 +639,7 @@ file( WRITE ${CMAKE_INSTALL_PREFIX}/casainit.csh
 
 # Create a top-level casainit.sh which sources the <arch>/casainit.sh
 # that belongs to this build.
-file( WRITE ${casaroot}/casainit.sh 
+file( WRITE ${casaroot}/casainit.sh
       "# Usage: cd ..; source casainit.sh\n"
       "# Generated by CMake from code/CMakeLists.txt.  Do not edit.\n"
       "export CASA_INSTALLATION_TYPE=\"developer-environment\"\n"
@@ -660,7 +660,7 @@ file( WRITE ${casaroot}/casainit.sh
       "    source $a_root/$a_arch/casainit.sh\n"
       "fi\n"
 )
-file( WRITE ${casaroot}/casainit.csh 
+file( WRITE ${casaroot}/casainit.csh
       "# Usage: cd ..; source casainit.csh\n"
       "# Generated by CMake from code/CMakeLists.txt.  Do not edit.\n"
       "setenv CASA_INSTALLATION_TYPE \"developer-environment\"\n"
@@ -709,7 +709,7 @@ file( COPY ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/casa-config
 
 
 # Preprocessor definitions
-add_definitions( 
+add_definitions(
 # seen in CASA code
         -DAIPS_HAS_QWT
 # seen nowhere
@@ -728,7 +728,7 @@ if( CMAKE_SYSTEM_NAME STREQUAL Linux )
   endif()
 elseif( CMAKE_SYSTEM_NAME STREQUAL Darwin )
   add_definitions(
-    -DAIPS_DARWIN 
+    -DAIPS_DARWIN
     )
 else(
     message( WARNING "Not on Linux nor Darwin!" )
@@ -792,7 +792,7 @@ if( Boost_VERSION GREATER 103499 )
   if( NOT Boost_FOUND )
     message( FATAL_ERROR "Boost-system could not be found. Please check!" )
   endif()
-endif() 
+endif()
 
 if( NOT Boost_VERSION GREATER 104099 AND NOT CASA_IGNORE_VERSION )
   message( FATAL_ERROR "Boost version (${Boost_VERSION}) is too old! Must be 104100 (1.41.0) or newer. Please check!" )
@@ -851,7 +851,7 @@ if( NOT FORTRAN_LIBRARIES )
   file( WRITE ${_try}
     "int main() { return 0; }\n"
     )
-  
+
   if( _gfortran_lib_path )
     try_compile( _have_gfortran ${CMAKE_BINARY_DIR} ${_try}
       CMAKE_FLAGS -Wdev "-DCMAKE_EXE_LINKER_FLAGS=${_gfortran_lib_path}"
@@ -864,13 +864,13 @@ if( NOT FORTRAN_LIBRARIES )
   try_compile( _have_g2c ${CMAKE_BINARY_DIR} ${_try}
     CMAKE_FLAGS -Wdev "-DCMAKE_EXE_LINKER_FLAGS=-lg2c"
     )
- 
+
   if( _have_gfortran )
     if( _gfortran_lib_path )
       set( FORTRAN_LIBRARIES ${_gfortran_lib_path}
 	CACHE STRING "Fortran library linker option" FORCE )
     else()
-      set( FORTRAN_LIBRARIES -lgfortran 
+      set( FORTRAN_LIBRARIES -lgfortran
         CACHE STRING "Fortran library linker option" FORCE )
     endif()
     message( STATUS "Looking for Fortran runtime libraries -- ${FORTRAN_LIBRARIES}" )
@@ -898,7 +898,7 @@ if( NOT SKIP_PGPLOT )
   if (CMAKE_SYSTEM MATCHES ^Darwin-11 AND NOT LLVMCOMPILER )
      set( CMAKE_SHARED_LINKER_FLAGS "-Wl,-undefined -Wl,error -framework AppKit -lgfortran" )
   else()
-     if (APPLE) 
+     if (APPLE)
         set( CMAKE_SHARED_LINKER_FLAGS "-Wl,-undefined -Wl,error -framework AppKit" )
      else()
         set( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-undefined -Wl,error" )
@@ -915,6 +915,7 @@ endif()
 # WCSLIB
 if( NOT SKIP_PGPLOT )
   casa_find( WCSLIB
+NO_LINK
     VERSION 4.3
     PREFIX_HINTS ${WCSLIB_ROOT_DIR}
     INCLUDES wcslib/wcsconfig.h
@@ -927,10 +928,11 @@ if( NOT SKIP_PGPLOT )
 #define CASA_STRINGIFY(x) #x
 #define CASA_TOSTRING(x) CASA_STRINGIFY(x)
     std::cout << CASA_TOSTRING(WCSLIB_VERSION)"
-    DEFINITIONS -DSIGNBIT 
+    DEFINITIONS -DSIGNBIT
     DEPENDS PGPLOT )
 else()
   casa_find( WCSLIB
+NO_LINK
     VERSION 4.3
     PREFIX_HINTS ${WCSLIB_ROOT_DIR}
     INCLUDES wcslib/wcsconfig.h
@@ -995,8 +997,8 @@ else()
       set( casacore_prefix ${CMAKE_INSTALL_PREFIX}/.. )
   endif()
   set( casacore_libs
-       casa_casa 
-       casa_coordinates 
+       casa_casa
+       casa_coordinates
        casa_fits
        casa_images
        casa_lattices
@@ -1010,6 +1012,7 @@ else()
 endif()
 
 casa_find( CASACORE
+NO_LINK
            VERSION 2.0.2
            PREFIX_HINTS ${CASACORE_ROOT_DIR} ${Boost_INCLUDE_DIR}
            DEFINITIONS "-DUseCasacoreNamespace"
@@ -1022,7 +1025,7 @@ casa_find( CASACORE
            CPP_VERSION CASACORE_VERSION
            RUN_VERSION "casacore::getVersionCASA()"
            DEPENDS LAPACK CFITSIO WCSLIB FFTW3 DL Boost)
-# Listing explicitly CASACore's dependency libraries is not necessary if the CASACore libraries 
+# Listing explicitly CASACore's dependency libraries is not necessary if the CASACore libraries
 # were built with correct linking information, which they are not.
 
 set( CASACORE_DEFINITIONS ${CASACORE_DEFINITIONS}
@@ -1035,7 +1038,7 @@ set( CASACORE_DEFINITIONS ${CASACORE_DEFINITIONS}
 if( CMAKE_SYSTEM_NAME STREQUAL Linux )
   set( CASACORE_DEFINITIONS ${CASACORE_DEFINITIONS}
     -D_FILE_OFFSET_BITS=64
-    -D_LARGEFILE_SOURCE 
+    -D_LARGEFILE_SOURCE
     )
 endif()
 
@@ -1057,10 +1060,10 @@ if( USE_ALMAWVR )
      message(STATUS "Will use CASA-internal version of BNMIN1 ...")
 endif()
 
-casa_find( GSLCBLAS	  
+casa_find( GSLCBLAS
               LIBS gslcblas )
 
-casa_find( GSL 
+casa_find( GSL
 	      LIBS gsl
    	      DEPENDS GSLCBLAS
             )
@@ -1077,10 +1080,10 @@ if(CMAKE_SYSTEM_NAME STREQUAL Linux AND GSL_LIBRARIES)
 endif( )
 
 # Java
-casa_find( Java
-  VERSION 1.5
-  PROGRAMS java
-  PROG_VERSION "-version")
+# casa_find( Java
+#   VERSION 1.5
+#   PROGRAMS java
+#  PROG_VERSION "-version")
 
 if ( ${dbusxx} STREQUAL dbus-c++ )
   # C++ DBus
@@ -1158,7 +1161,7 @@ endif( )
 #  INCLUDES_SUFFIXES ATM
 #  LIBS aatm
 #  CPP_VERSION ATM_VERSION
-#  RUN_VERSION "atm::getVersion()" 
+#  RUN_VERSION "atm::getVersion()"
 #  PREFIX_HINTS ${ATM_ROOT_DIR}
 #)
 
@@ -1169,8 +1172,8 @@ casa_find( LIBXML2
   INCLUDES libxml/xmlversion.h
   INCLUDES_SUFFIXES libxml2
   LIBS xml2
-  CPP_VERSION LIBXML_DOTTED_VERSION 
-  RUN_VERSION "LIBXML_DOTTED_VERSION; LIBXML_TEST_VERSION;" 
+  CPP_VERSION LIBXML_DOTTED_VERSION
+  RUN_VERSION "LIBXML_DOTTED_VERSION; LIBXML_TEST_VERSION;"
   )
 
 # XSLT
@@ -1180,8 +1183,8 @@ casa_find( LIBXSLT
   INCLUDES libxslt/xsltconfig.h
   INCLUDES_SUFFIXES libxslt
   LIBS xslt
-  CPP_VERSION LIBXSLT_DOTTED_VERSION 
-  RUN_VERSION "LIBXSLT_DOTTED_VERSION; LIBXSLT_VERSION;" 
+  CPP_VERSION LIBXSLT_DOTTED_VERSION
+  RUN_VERSION "LIBXSLT_DOTTED_VERSION; LIBXSLT_VERSION;"
   )
 
 # Do not reuse FindLibXml2.cmake, except this excerpt
@@ -1201,7 +1204,7 @@ if( ${qt4} STREQUAL casa-qt )
   if ( EXISTS /opt/casa/02/bin/qmake )
       set( QT_QMAKE_EXECUTABLE /opt/casa/02/bin/qmake )
   elseif ( EXISTS /opt/casa/02/libexec/qt4/bin/qmake )
-      set( QT_QMAKE_EXECUTABLE /opt/casa/02/libexec/qt4/bin/qmake ) 
+      set( QT_QMAKE_EXECUTABLE /opt/casa/02/libexec/qt4/bin/qmake )
   else( )
       set( QT_QMAKE_EXECUTABLE /usr/lib64/casa/01/bin/qmake )
   endif( )
@@ -1214,23 +1217,23 @@ endif()
 if(CMAKE_SYSTEM_NAME STREQUAL Linux AND EXISTS /usr/lib64/libqwt.so.6 )
   find_package(
     Qt4 ${qt4-version}
-    COMPONENTS QtCore QtGui QtDBus QtXml QtUiTools QtSvg QtOpenGL)
+    COMPONENTS QtCore QtGui QtXml QtUiTools QtSvg QtOpenGL)
     set( QT_OPENGL ${QT_QTOPENGL_LIBRARY} )
 else( )
   find_package(
     Qt4 ${qt4-version}
-    COMPONENTS QtCore QtGui QtDBus QtXml QtUiTools QtSvg )
+    COMPONENTS QtCore QtGui QtXml QtUiTools QtSvg )
 endif( )
 if( NOT QT4_FOUND )
-  message( FATAL_ERROR "Qt4 could not be found. Please check!" )
+  # message( FATAL_ERROR "Qt4 could not be found. Please check!" )
 endif()
 
 set( QT4_INCLUDE_DIRS ${QT_INCLUDES} CACHE PATH "QT4 include directories" FORCE )
 set( QT4_DEFINITIONS ${QT_DEFINITIONS} -DQT_NO_DEBUG CACHE STRING "QT4 preprocessor flags" FORCE )
-set( QT4_LIBRARIES 
-  ${QT_QTCORE_LIBRARY} 
-  ${QT_QTGUI_LIBRARY} 
-  ${QT_QTDBUS_LIBRARY} 
+set( QT4_LIBRARIES
+  ${QT_QTCORE_LIBRARY}
+  ${QT_QTGUI_LIBRARY}
+  ${QT_QTDBUS_LIBRARY}
   ${QT_QTXML_LIBRARY} ${QT_QTUITOOLS_LIBRARY} ${QT_QTSVG_LIBRARY} ${QT_OPENGL}
   CACHE FILEPATH "QT4 libraries" FORCE )
 list( REMOVE_ITEM QT4_LIBRARIES "optimized" )
@@ -1243,10 +1246,11 @@ set( QT4_FOUND TRUE CACHE BOOL "Was QT4 found?" )
 
 # QWT (requires Qt)
 casa_find( QWT
+NO_LINK
   VERSION 5.1.1
   INCLUDES qwt_global.h
   INCLUDES_SUFFIXES qwt qwt-qt4 qwt5
-  PREFIX_HINTS 
+  PREFIX_HINTS
     ${QWT_ROOT_DIR}
     ${casa_packages}/qwt-5.2.0
     ${casa_packages}/qwt-5.2.1-svn
@@ -1266,8 +1270,8 @@ casa_find( XERCES
   PREFIX_HINTS ${XERCES_ROOT_DIR}
   INCLUDES xercesc/util/XercesVersion.hpp
   LIBS xerces-c
-  CPP_VERSION XERCES_FULLVERSIONDOT 
-  RUN_VERSION "gXercesMajVersion << '.' << gXercesMinVersion << '.' << gXercesRevision" 
+  CPP_VERSION XERCES_FULLVERSIONDOT
+  RUN_VERSION "gXercesMajVersion << '.' << gXercesMinVersion << '.' << gXercesRevision"
 )
 if( XERCES_VERSION VERSION_EQUAL   3.2 OR
     XERCES_VERSION VERSION_GREATER 3.2 )
@@ -1294,11 +1298,11 @@ casa_find( RPFITS
   LIBS rpfits
   #RUN_VERSION names_.rpfitsversion
   PREFIX_HINTS ${RPFITS_ROOT_DIR}
-  DEPENDS FORTRAN 
+  DEPENDS FORTRAN
 )
 
 # Readline
-casa_find( READLINE 
+casa_find( READLINE
   VERSION 4.3
   INCLUDES readline/readline.h #depends on <cstdio> to compile
   LIBS readline ncurses
@@ -1335,7 +1339,7 @@ casa_find( LIBSAKURA
 #                         #
 ###########################
 
-include (GoogleTestInstall)
+# include (GoogleTestInstall)
 
 
 #########################
@@ -1357,45 +1361,45 @@ casa_config_end()
 
 # for linux RPM & binary distros libgraphics contains pgplot (linked in)...
 if( APPLE )
-  casa_add_module( graphics CASACORE PGPLOT WCSLIB Boost)
+#  casa_add_module( graphics CASACORE PGPLOT WCSLIB Boost)
 else()
   if( NOT SKIP_PGPLOT )
-    casa_add_module( graphics CASACORE PGPLOT X11 WCSLIB Boost)
+#    casa_add_module( graphics CASACORE PGPLOT X11 WCSLIB Boost)
   else()
-    casa_add_module( graphics CASACORE X11 WCSLIB Boost)
+#    casa_add_module( graphics CASACORE X11 WCSLIB Boost)
   endif()
 endif()
-casa_add_module( atmosphere )
+#casa_add_module( atmosphere )
 casa_add_module( stdcasa CASACORE Boost )
-casa_add_module( parallel CASACORE Boost )
-casa_add_module( casadbus CASACORE DBUS Boost)
-casa_add_module( casaqt CASACORE QT4 QWT XERCES graphics stdcasa Boost)
+#casa_add_module( parallel CASACORE Boost )
+#casa_add_module( casadbus CASACORE DBUS Boost)
+# casa_add_module( casaqt CASACORE QT4 QWT XERCES graphics stdcasa Boost)
 ###casa_add_module ( CasaDataObjects CASACORE)
 casa_add_module( components stdcasa CASACORE Boost GSL)
 casa_add_module( imageanalysis CASACORE components)
-casa_add_module( asdmstman CASACORE Boost )
-casa_add_module( msvis CASACORE Boost asdmstman ) # WarningsAsErrors)
-casa_add_module( mstransform CASACORE stdcasa imageanalysis msvis)
-casa_add_module( synthesis CASACORE atmosphere stdcasa casadbus asdmstman Boost SQLITE ${CASAMPI} imageanalysis msvis mstransform LIBSAKURA)
-casa_add_module( flagging CASACORE Boost stdcasa casadbus synthesis casaqt QT4 msvis mstransform)
-casa_add_module( spectrallines CASACORE imageanalysis Boost SQLITE)
-casa_add_module( guitools CASACORE QT4 QWT synthesis)
-casa_add_module( display CASACORE WCSLIB QT4 casaqt guitools synthesis imageanalysis Boost stdcasa casadbus spectrallines components)
-casa_add_module( plotms CASACORE QT4 casaqt synthesis Boost )
-casa_add_module( calanalysis CASACORE synthesis Boost)
-casa_add_module( alma CASACORE LIBXML2 LIBXSLT Boost synthesis msvis)
+# casa_add_module( asdmstman CASACORE Boost )
+# casa_add_module( msvis CASACORE Boost asdmstman ) # WarningsAsErrors)
+# casa_add_module( mstransform CASACORE stdcasa imageanalysis msvis)
+# casa_add_module( synthesis CASACORE atmosphere stdcasa casadbus asdmstman Boost SQLITE ${CASAMPI} imageanalysis msvis mstransform LIBSAKURA)
+# casa_add_module( flagging CASACORE Boost stdcasa casadbus synthesis casaqt QT4 msvis mstransform)
+# casa_add_module( spectrallines CASACORE imageanalysis Boost SQLITE)
+# casa_add_module( guitools CASACORE QT4 QWT synthesis)
+# casa_add_module( display CASACORE WCSLIB QT4 casaqt guitools synthesis imageanalysis Boost stdcasa casadbus spectrallines components)
+# casa_add_module( plotms CASACORE QT4 casaqt synthesis Boost )
+# casa_add_module( calanalysis CASACORE synthesis Boost)
+# casa_add_module( alma CASACORE LIBXML2 LIBXSLT Boost synthesis msvis)
 #casa_add_module( alma_v3 CASACORE LIBXML2 LIBXSLT Boost synthesis)
 #casa_add_module( oldalma CASACORE LIBXML2 Boost )
-casa_add_module( nrao CASACORE Boost)
-casa_add_module( atnf CASACORE Boost RPFITS)
-casa_add_module( miriad CASACORE Boost components)
-casa_add_module( casa_sakura CASACORE Boost LIBSAKURA)
-casa_add_module( singledish CASACORE casa_sakura msvis mstransform)
-casa_add_module( bnmin1 Boost GSL GSLCBLAS CASACORE )
-casa_add_module( air_casawvr CASACORE bnmin1 Boost synthesis WCSLIB CFITSIO LAPACK )
+# casa_add_module( nrao CASACORE Boost)
+# casa_add_module( atnf CASACORE Boost RPFITS)
+# casa_add_module( miriad CASACORE Boost components)
+# casa_add_module( casa_sakura CASACORE Boost LIBSAKURA)
+# casa_add_module( singledish CASACORE casa_sakura msvis mstransform)
+# casa_add_module( bnmin1 Boost GSL GSLCBLAS CASACORE )
+# casa_add_module( air_casawvr CASACORE bnmin1 Boost synthesis WCSLIB CFITSIO LAPACK )
 
 if (UseCrashReporter AND NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
-   add_subdirectory( crash) 
+   add_subdirectory( crash)
 endif( )
 
 #
diff --git a/code/components/CMakeLists.txt b/code/components/CMakeLists.txt
index d27923158..1b71ff105 100644
--- a/code/components/CMakeLists.txt
+++ b/code/components/CMakeLists.txt
@@ -45,8 +45,8 @@ casa_add_library( components
     ComponentModels/C11Timer.cc
     ComponentModels/TabularSpectrum.cc
     ComponentModels/TwoSidedShape.cc
-    
-    
+
+
     SpectralComponents/CompiledSpectralElement.cc
     SpectralComponents/GaussianMultipletSpectralElement.cc
     SpectralComponents/GaussianSpectralElement.cc
@@ -63,7 +63,7 @@ casa_add_library( components
     SpectralComponents/SpectralList.cc
     SpectralComponents/SpectralListFactory.cc
 )
-install (FILES 
+install (FILES
     ComponentModels/ComponentList.h
     ComponentModels/ComponentShape.h
     ComponentModels/ComponentType.h
@@ -95,7 +95,7 @@ install (FILES
     ComponentModels/TwoSidedShape.h
 	DESTINATION include/casacode/components/ComponentModels
 )
-install (FILES 
+install (FILES
     SpectralComponents/CompiledSpectralElement.h
     SpectralComponents/GaussianMultipletSpectralElement.h
     SpectralComponents/GaussianSpectralElement.h
@@ -144,6 +144,6 @@ casa_add_assay( components SpectralComponents/test/tProfileFit1D.cc )
 casa_add_assay( components SpectralComponents/test/tSpectralFit.cc )
 
 casa_add_unit_test( MODULES components SOURCES ComponentModels/test/tLimbDarkenedDiskShape.cc )
-casa_add_google_test( MODULES components SOURCES ComponentModels/test/FluxStandard_GTest.cc ComponentModels/test/FluxStandardTest.cc )
-casa_add_google_test( MODULES components SOURCES ComponentModels/test/EphemObjFluxStandard_GTest.cc ComponentModels/test/FluxStandardTest.cc )
-casa_add_google_test( MODULES components SOURCES ComponentModels/test/FluxStandard2_GTest.cc ComponentModels/test/FluxStandardTest.cc )
+# casa_add_google_test( MODULES components SOURCES ComponentModels/test/FluxStandard_GTest.cc ComponentModels/test/FluxStandardTest.cc )
+# casa_add_google_test( MODULES components SOURCES ComponentModels/test/EphemObjFluxStandard_GTest.cc ComponentModels/test/FluxStandardTest.cc )
+# casa_add_google_test( MODULES components SOURCES ComponentModels/test/FluxStandard2_GTest.cc ComponentModels/test/FluxStandardTest.cc )
diff --git a/code/imageanalysis/CMakeLists.txt b/code/imageanalysis/CMakeLists.txt
index 01f8add7d..be58451d4 100644
--- a/code/imageanalysis/CMakeLists.txt
+++ b/code/imageanalysis/CMakeLists.txt
@@ -284,7 +284,7 @@ casa_add_assay( imageanalysis IO/test/tRegionTextParser.cc )
 
 casa_add_assay( imageanalysis Regions/test/tCasacRegionManager.cc )
 
-casa_add_google_test (MODULES imageanalysis SOURCES ImageAnalysis/test/ImageMaskHandler_Gtest.cc ImageAnalysis/test/ImageMaskHandlerTest.cc)
+# casa_add_google_test (MODULES imageanalysis SOURCES ImageAnalysis/test/ImageMaskHandler_Gtest.cc ImageAnalysis/test/ImageMaskHandlerTest.cc)
 
 casa_add_unit_test ( MODULES imageanalysis SOURCES Annotations/test/tAnnAnnulus.cc )
 casa_add_unit_test ( MODULES imageanalysis SOURCES Annotations/test/tAnnCenterBox.cc )
@@ -305,4 +305,3 @@ casa_add_unit_test ( MODULES imageanalysis SOURCES ImageAnalysis/test/tComponent
 casa_add_unit_test ( MODULES imageanalysis SOURCES ImageAnalysis/test/tImage2DConvolver.cc )
 casa_add_unit_test ( MODULES imageanalysis SOURCES ImageAnalysis/test/tImageCollapser.cc )
 casa_add_unit_test ( MODULES imageanalysis SOURCES ImageAnalysis/test/tImageStatsCalculator.cc )
-
diff --git a/code/install/target.cmake b/code/install/target.cmake
index 7530a7dd4..0a9164306 100644
--- a/code/install/target.cmake
+++ b/code/install/target.cmake
@@ -26,8 +26,8 @@
 # In CASA, it does not make sense to build without also installing
 # the build products. Therefore...
 #
-# Create a target which ensures that the install target is 
-# always run as part of all. 
+# Create a target which ensures that the install target is
+# always run as part of all.
 #
 # For this to work, all other targets must be added as dependencies
 # of this "inst" target. This is done in the macro's below using add_dependencies()
@@ -63,8 +63,8 @@ macro( casa_add_library module )
 
   # Create the target lib<module>, but set the output library
   # filename to lib<module>.<suffix> (which would have defaulted
-  # to liblib<module>.<suffix>). The target named <module> is the 
-  # umbrella target for all targets (libraries, executables, ...) 
+  # to liblib<module>.<suffix>). The target named <module> is the
+  # umbrella target for all targets (libraries, executables, ...)
   # in this subdirectory.
 
   add_library( lib${module} ${ARGN} )
@@ -133,31 +133,31 @@ endmacro()
 #     <module>_INCLUDE_DIRS
 #     <module>_DEFINITIONS
 #     <module>_LINK_TO
-# 
+#
 # Fixme: move qt4, dbus, alma special cases
 # to client code
 
 macro( casa_add_module module )
 
-  set (options WarningsAsErrors) 
+  set (options WarningsAsErrors)
   set (oneValueArgs ) # None
   set (multiValueArgs )
 
-  cmake_parse_arguments (casa_add_module "${options}" "${oneValueArgs}" 
+  cmake_parse_arguments (casa_add_module "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})
 
   set( _dependencies ${casa_add_module_UNPARSED_ARGUMENTS})
 
   # Internal target to update this module including dependencies,
   # then install this module, excluding dependencies
-  add_custom_target( 
+  add_custom_target(
     ${module}_install
-    COMMAND ${CMAKE_BUILD_TOOL} install 
+    COMMAND ${CMAKE_BUILD_TOOL} install
     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${module}
     )
 
   # Target to update and install this module, excluding dependencies
-  add_custom_target( 
+  add_custom_target(
     ${module}_fast
     COMMAND ${CMAKE_BUILD_TOOL} install/fast
     WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${module}
@@ -168,7 +168,7 @@ macro( casa_add_module module )
   add_custom_target( ${module} COMMENT "Updating ${module}..." )
   add_dependencies( ${module} ${module}_install )
 
-  # If WarningsAsErrors was specified, then add a compiler flag to treat 
+  # If WarningsAsErrors was specified, then add a compiler flag to treat
   # warnings as error for this module
 
   if ( casa_add_module_WarningsAsErrors )
@@ -195,8 +195,8 @@ macro( casa_add_module module )
         message( FATAL_ERROR "${_dep} is listed as dependency for ${module}, but both ${_dep}_INCLUDE_DIRS and ${_dep}_LIBRARIES are undefined!" )
       endif()
     endif()
-    
-    # INCLUDE_DIRS 
+
+    # INCLUDE_DIRS
     # Add each of the dependent's include dirs
     # to this module's include dirs
     # (if not already contained in _INCLUDE_DIRS)
@@ -206,14 +206,14 @@ macro( casa_add_module module )
 
     endforeach()
 
-    # DEFINITIONS 
+    # DEFINITIONS
     foreach( _def ${${_dep}_DEFINITIONS} )
 
       casa_append( ${module}_DEFINITIONS ${_def} )
 
     endforeach()
 
-    # LINK_TO 
+    # LINK_TO
     # Unlike include dirs, libraries do not have
     # to be transitively propagated.
     # E.g. if A links to (depends on) B and B links to C
@@ -225,7 +225,7 @@ macro( casa_add_module module )
 
       # External library
 
-      set( ${module}_LINK_TO 
+      set( ${module}_LINK_TO
         ${${module}_LINK_TO}
         ${${_dep}_LIBRARIES} )
 
@@ -233,8 +233,8 @@ macro( casa_add_module module )
       # Another CASA module
 
       set(
-        ${module}_LINK_TO 
-        ${${module}_LINK_TO} 
+        ${module}_LINK_TO
+        ${${module}_LINK_TO}
         lib${_dep} )
 
       add_dependencies( ${module} ${_dep}_install )
@@ -244,8 +244,8 @@ macro( casa_add_module module )
     # Generated code need build dir in include path
     if( ${_dep} STREQUAL "DBUS" OR
         ${_dep} STREQUAL "QT4" )
-      
-      set( ${module}_INCLUDE_DIRS 
+
+      set( ${module}_INCLUDE_DIRS
         ${${module}_INCLUDE_DIRS}
         ${CMAKE_BINARY_DIR} )
 
@@ -256,7 +256,7 @@ macro( casa_add_module module )
         ${module} STREQUAL "oldalma" OR
 	${module} STREQUAL "alma_v3")
 
-      set( ${module}_INCLUDE_DIRS 
+      set( ${module}_INCLUDE_DIRS
         ${${module}_INCLUDE_DIRS}
         ${CMAKE_SOURCE_DIR}/${module}/ASDM
         ${CMAKE_SOURCE_DIR}/${module}/ASDMBinaries
@@ -281,7 +281,7 @@ endmacro()
 #
 # casa_add_python( module
 #                  target_name
-#                  installation_directory 
+#                  installation_directory
 #                  source1 [source2 ...]
 #                )
 #
@@ -302,7 +302,7 @@ endmacro()
 #
 #   casa_add_pymodule( module name source1 [source2 ...] )
 #
-# Creates a python module. 
+# Creates a python module.
 # The module is always linked to libxmlcasa and ${xmlcasa_LINK_TO}.
 #
 
@@ -358,13 +358,13 @@ endmacro()
 #
 macro( casa_add_check_module)
 
-    set (options ) 
+    set (options )
     set (oneValueArgs TEST) # None
     set (multiValueArgs MODULES)
 
-    cmake_parse_arguments (casa_add_check "${options}" "${oneValueArgs}" 
+    cmake_parse_arguments (casa_add_check "${options}" "${oneValueArgs}"
                            "${multiValueArgs}" ${ARGN})
-  
+
     set (modules ${casa_add_check_MODULES})
     set (test ${casa_add_check_TEST})
 
@@ -412,9 +412,9 @@ endmacro ()
 
 #
 # casa_add_unit_test( MODULES module [submodule [subsubmodule]  ...]
-#                     SOURCES source ... 
-#                     [LIBRARIES library1 [library2] ...] 
-#                     [INCLUDE_DIRS dir1 [dir2] ...] 
+#                     SOURCES source ...
+#                     [LIBRARIES library1 [library2] ...]
+#                     [INCLUDE_DIRS dir1 [dir2] ...]
 #                     [NOT_READY])
 #
 #      Add a unit test. The name of the test will be the basename of
@@ -425,19 +425,19 @@ endmacro ()
 #      build and test process (usually used for legacy unit tests awaiting
 #      vetting).
 #
-# Example: 
+# Example:
 #
 # casa_add_unit_test (msvis VisibilityIterator_Test.cc)
 #
 macro( casa_add_unit_test)
 
-  set (options NOT_READY COMMIT_ONLY) 
+  set (options NOT_READY COMMIT_ONLY)
   set (oneValueArgs) # None
   set (multiValueArgs LIBRARIES COMMAND_ARGUMENTS INCLUDE_DIRS SOURCES MODULES) # None
 
-  cmake_parse_arguments (casa_unit_test "${options}" "${oneValueArgs}" 
+  cmake_parse_arguments (casa_unit_test "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})
-  
+
   list (GET casa_unit_test_SOURCES 0 firstSource)
   get_filename_component( testName ${firstSource} NAME_WE )
   get_filename_component(path ${firstSource} PATH)
@@ -468,7 +468,7 @@ macro( casa_add_unit_test)
       set_property (TARGET ${testName} APPEND PROPERTY COMPILE_FLAGS "-Werror")
     endif ()
   endif ()
-  
+
   # add_executable( ${testName} EXCLUDE_FROM_ALL ${sources} ) # not part of main build
   # target_link_libraries( ${testName} lib${module} ${casa_unit_test_LIBRARIES})
 
@@ -487,8 +487,8 @@ macro( casa_add_unit_test)
 
     # This unit test is ready for normal use.  Add it as a runnable unit test both
     # globally and within its module.
-    
-    add_test( ${testName} ${CASA_assay} ${CMAKE_CURRENT_BINARY_DIR}/${testName} 
+
+    add_test( ${testName} ${CASA_assay} ${CMAKE_CURRENT_BINARY_DIR}/${testName}
               ${casa_unit_test_COMMAND_ARGUMENTS})
 
     add_dependencies( unit_test ${testName} )
@@ -510,15 +510,15 @@ macro( casa_add_unit_test)
     message ("WARNING Unit test ${firstSource} not ready for normal unit test usage.")
 
     if (NOT TARGET unit_test_unready) # create the unit_test_unready target if it doesn't exist
- 
+
        add_custom_target (unit_test_unready)
-    
+
     endif (NOT TARGET unit_test_unready)
 
     if (NOT TARGET unit_test_unready_${module}) # create unit_test_unready_MODULE if needed
 
        add_custom_target (unit_test_unready_${module})
-    
+
     endif (NOT TARGET unit_test_unready_${module})
 
     # Add the test so that unit_test_unready and unit_test_unready_MODULE targets will depend on it.
@@ -533,13 +533,13 @@ macro( casa_add_unit_test)
 endmacro()
 
 # casa_add_google_test (MODULES module [submodule [subsubmodule] ...] SOURCES source1 [source2] ... [LIB library1 [library2] ...])
-# 
+#
 # Adds a google-test unit test to the module.
 #
 # module - The name of the module (e.g., msvis, synthesis, etc.); the module is used to name the
 #          library containing the module (e.g., libmsvis, libsynthesis)
 #
-# sources - The source files that make up the test.  
+# sources - The source files that make up the test.
 #           The first source file is taken as the name of
 #           the test executable (e.g., msvis/MSVis/MyTest.cc -->
 #           executable MyTest).  Paths of the source files are usually
@@ -561,43 +561,7 @@ endmacro()
 #             code/install/assay script.  # # An XML file testName.xml
 #             will be produced when the test is run.  # macro
 #             (casa_add_google_test)
-macro (casa_add_google_test)
-
-    # Parse the arguments
-
-    set (options NOT_ON_APPLE)
-    set (oneValueArgs ) 
-    set (multiValueArgs SOURCES LIBS MODULES) # the lists of source files and libraries
-    cmake_parse_arguments (google_test "${options}" "${oneValueArgs}"
-                           "${multiValueArgs}"  ${ARGN})
 
-    list(GET google_test_SOURCES 0 testName)
-    get_filename_component (testName ${testName} NAME_WE)
-
-    if (DEFINED APPLE AND ${google_test_NOT_ON_APPLE})
-
-        message ("WARNING:: Test ${testName} disabled on Apple platform.")
-
-    else ()
-
-        # The Google Test install logic in cmake will put the needed include and library
-        # below the directory stored in the variable GtestRoot.
-
-        set (gtestIncludeDirectory ${GoogleTest_ReleaseRoot}/include)
-        set (gtestLibrary ${GoogleTest_LibraryDir}/libgtest.a)
-
-        set (libraries ${gtestLibrary})
-        list (APPEND gtestLibrary ${google_test_LIBS})
-
-        casa_add_unit_test (MODULES ${google_test_MODULES} SOURCES ${google_test_SOURCES} 
-                            LIBRARIES ${libraries} # gtest + provide libs
-                            INCLUDE_DIRS ${gtestIncludeDirectory}) # gtest include dirs
-
-        add_dependencies (${CasaTestName} ${GoogleTest_Target})
-
-    endif ()
-
-endmacro ()
 
 # casa_add_demo (module sourceFile1 [sourceFile2 ...])
 #
@@ -606,7 +570,7 @@ endmacro ()
 # intended to serve as an example to other developers.
 #
 # The demo program will be built as part of the normal casa and module builds.
-# This will help reduce the incidence of bit-rot; however, since the application 
+# This will help reduce the incidence of bit-rot; however, since the application
 # will not be executed as part of any of CASA's automatic processes there is
 # some chance that the program could become unintentionally obsolete.
 #
@@ -641,4 +605,4 @@ macro (casa_add_demo module)
 
   add_dependencies (${executableName} lib${module})
 
-endmacro ()
\ No newline at end of file
+endmacro ()
